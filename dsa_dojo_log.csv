ID,Category,Concepts,Question,Constraints,Sample Input,Sample Output,Test Cases,Solution_C,Solution_Python,Solution_Java,Solution_Javascript,Solution_C++
White-1,String Reversal,,Write a function that reverses a given string.  The function should take a string as input and return the reversed string.,"- The input string will only contain lowercase letters.
- The length of the input string will be between 1 and 1000 characters (inclusive).","**  ""hello""

**","** ""olleh""","abcde
hello
madam
a
racecar",,,,,
White-2,Break & Continue,,"Given an array of integers, calculate the sum of only the even numbers. Skip odd numbers using a loop and the `continue` statement.  If the input array is empty, return 0.","- The array will contain only integers.
- The array size will be at most 100.
- Integers in the array will be within the range of -1000 to 1000.","** `[1, 2, 3, 4, 5, 6]`
**",** `12` (2 + 4 + 6),"[2, 4, 6, 8, 10]
[1, 3, 5, 7, 9]
[-2, 0, 2, 4]
[]
[-1, -2, -3, -4]",,,,,
White-3,Modulo Arithmetic,,"Given two integers, `a` and `b`, find the remainder when `a` is divided by `b`.  This is the modulo operation (%).","- `1 ≤ a, b ≤ 1000`
- `b > 0`","**
`a = 17`
`b = 5`

**","**
`2`  (Because 17 divided by 5 leaves a remainder of 2)","10 3
25 7
100 11
5 5
1000 1",,,,,
White-4,Intro to Recursion (factorial),,"Write a function that calculates the factorial of a non-negative integer using recursion. The factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.","- The input integer n will be non-negative (0 or greater).
- The input integer n will be less than or equal to 12 (to avoid potential integer overflow).",5,120,"10
0
7
12
1",,,,,
White-5,Parameters & Arguments,,"Write a function that takes two integer parameters, `a` and `b`, and returns their sum.  However, there's a twist! The function should also print the value of 'a' before calculating and returning the sum.","* -1000 ≤ a, b ≤ 1000","**

5 10

**","**

5
15","15 20
-5 10
0 0
100 -50
-20 -30",,,,,
White-6,Intro to Time & Space Complexity,,"Given an integer `n`, count the number of sheep from 1 to n.  This seems simple, but we'll focus on understanding the time complexity.",- 1 ≤ n ≤ 100000,5,15 (1 + 2 + 3 + 4 + 5 = 15),"10
100
10000
50000
78945",,,,,
White-7,"Basic Array Operations (sum, max, min)",,"Given an array of integers, find the sum, maximum, and minimum values within the array.","* The array will contain at least one integer.
* The integers in the array will be within the range of a 32-bit integer.","[1, 5, 2, 8, 3]","Sum: 19, Max: 8, Min: 1","[10, 20, 30, 40, 50]
[-5, 0, 5, 10, -15]
[1, 1, 1, 1, 1]
[100, -10, 50, 20, -50]
[-1, -2, -3, -4, -5]",,,,,
White-8,1D Array Declaration & Traversal,,"Given an array of integers, find the sum of all even numbers in the array.","* The array will contain at least one element.
* The array will contain only integers between -100 and 100 (inclusive).
* The size of the array will not exceed 100 elements.","**  `[1, 2, 3, 4, 5, 6]`
**",** `12` (2 + 4 + 6),"[1, 2, 3, 4, 5, 6]
[10, -20, 30, -40]
[-1, -2, -3, -4]
[1, 3, 5, 7, 9]
[2, 4, 6, 8, 10]",,,,,
White-9,Bitwise Operators,,"Given an 8-bit unsigned integer, write a function that flips all its bits (0s become 1s and vice-versa).",- The input will always be an 8-bit unsigned integer (0-255).,10 (binary: 00001010),245 (binary: 11110101),"15
255
0
128
64",,,,,
White-10,1D Array Declaration & Traversal,,"Given an array of integers, calculate the sum of all the digits present in each integer within the array.  For example, if the array contains [123, 45, 6], the function should return 1 + 2 + 3 + 4 + 5 + 6 = 21.","- The array will contain only positive integers.
- The array size will be between 1 and 100.
- Each integer in the array will be between 0 and 1000.","** [12, 4, 87]

**",** 22 (1 + 2 + 4 + 8 + 7),"[1,2,3]
[999,1]
[100,200,300]
[1,10,100,1000]
[5,5,5,5]",,,,,
White-11,Bitwise Operators,,"Given an integer, determine if its binary representation is a palindrome. A palindrome is a sequence that reads the same backward as forward.",#NAME?,10,"true (Binary representation of 10 is 1010, which is a palindrome)

Input: 13","5
100
255
1023
0",,,,,
White-12,1D Array Declaration & Traversal,,You're on a treasure hunt! The treasure map is encoded in a 1D array. Each element represents a location. Find the total number of locations visited before you stumble upon the 'X' marking the treasure spot.,"- The array will contain only lowercase English alphabets and 'X'.
- The array size will be between 1 and 100.
- 'X' will always be present in the array.","`['a', 'b', 'c', 'X', 'e']`",4 (4 locations visited before finding 'X'),"['a', 'b', 'X', 'd']
['p', 'q', 'r', 's', 'X', 'u']
['X']
['a', 'b', 'c', 'd', 'e', 'f']
['a','x','X','b']",,,,,
White-13,Type Casting,,"You are given an integer representing the number of seconds since the start of a race.  Your task is to convert this total number of seconds into hours, minutes, and remaining seconds.  For example, 3700 seconds translates to 1 hour, 1 minute, and 40 seconds.",#NAME?,3700,1 1 40,"10000
3661
0
86400
4500",,,,,
White-14,String Reversal,,Write a function that reverses a given string.  The function should take a string as input and return the reversed string.,"* The input string will contain only lowercase English letters.
* The input string will have a length between 1 and 1000 characters (inclusive).","**  ""hello""
**","** ""olleh""","madam
racecar
hello world
level
rotor",,,,,
White-15,Parameters & Arguments,,"You're organizing your socks!  Given the number of red socks and blue socks, write a function that returns the total number of socks.",* The number of red and blue socks will be non-negative integers.,"red_socks = 5, blue_socks = 3",8,"Input: 10 20
Output: 30
Input: 0 5
Output: 5
Input: 15 0
Output: 15
Input: 25 75
Output: 100
Input: 100 100
Output: 200",,,,,
White-16,Break & Continue,,"Given an array of integers, print only the positive numbers, skipping any zeros encountered. Use `break` and `continue` statements to control the flow of your loop.","- The array will contain integers between -100 and 100.
- The array size will be between 1 and 100.","[1, 0, 2, 0, 3, -1, 4, 0, 5]",1 2 3 4 5,"Input: [1, 2, 3, 4, 5]
Output: 1 2 3 4 5
Input: [0, 0, 0, 0, 0]
Output: 
Input: [-1, 0, 1, 2, 3]
Output: 
Input: [1, 0, -1, 2, 0, 3]
Output: 1",,,,,
White-17,Best/Worst/Average Case Basics,,"Given an unsorted array of integers, determine the number of comparisons needed to find the minimum element in the array in the best, worst, and average cases.","- The array will contain at least one element.
- The elements of the array are integers.
- Assume the average case is the case when the minimum element is in the middle of the array","[3, 1, 4, 1, 5, 9, 2, 6]","Best Case: 0, Worst Case: 7, Average Case: 4","Input: [1, 2, 3, 4, 5]
Output: Best Case: 0, Worst Case: 4, Average Case: 2
Input: [5, 4, 3, 2, 1]
Output: Best Case: 0, Worst Case: 4, Average Case: 2
Input: [10, 5, 20, 15, 30]
Output: Best Case: 0, Worst Case: 4, Average Case: 2
Input: [1]
Output: Best Case: 0, Worst Case: 0, Average Case: 0",,,,,
White-N/A,Function Definition & Call,,"You're designing a snack dispenser for a spaceship!  The dispenser has a limited number of snacks, and each snack has a unique code.  Your task is to write a function that checks if a given snack code is available in the dispenser.","- The snack codes are integers.
- The number of snacks in the dispenser is fixed and given as input.
- The available snack codes are given as an array.
- Assume that snack codes are always positive integers.
- The function should return `true` if the snack code is available, and `false` otherwise.","Available snacks: [1, 5, 3, 7], Snack code to check: 5","true

Input: Available snacks: [1, 5, 3, 7], Snack code to check: 9","Input: [1, 2, 3, 4, 5]
Output: true
Input: [10, 20, 30]
Output: false
Input: [5, 15, 25, 35, 5]
Output: true
Input: []
Output: false
Input: [1,1,1,1,1,2]
Output: true",,,,,
White-N/A,"Conditionals (if-else, switch-case)",,"You're designing a software for a candy machine.  The machine dispenses different candies based on the code entered.  Your task is to write a program that takes a candy code as input and prints the name of the candy.  If the code is invalid, print ""Invalid Code"".","- The candy codes are integers between 1 and 5 (inclusive).
- Candy codes and their corresponding names:
    - 1: Chocolate
    - 2: Lollipop
    - 3: Gummy Bears
    - 4: Marshmallow
    - 5: Caramel",3,Gummy Bears,"Input: 1
Output: Chocolate
Input: 5
Output: Caramel
Input: 0
Output: Invalid Code
Input: 6
Output: Invalid Code
Input: 3
Output: Gummy Bears",,,,,
White-N/A,Variables & Data Types,,"The Galactic Snack Bar is tracking its daily sales.  They sell three types of snacks: Fizzbangs, ZapZaps, and Glimmerglobs.  Given the number of each snack sold, calculate the total number of snacks sold.",* The number of each snack type sold will be a non-negative integer.,"Fizzbangs = 10, ZapZaps = 5, Glimmerglobs = 20",35,"Input: 15 25 35
Output: 75
Input: 0 10 0
Output: 10
Input: 100 200 300
Output: 600
Input: 5 5 5
Output: 15",,,,,
White-18,Variables & Data Types,,"Given two strings, `str1` and `str2`, concatenate them and print the resulting string.  The concatenation should be done such that `str1` comes before `str2`.","- The length of each string will be between 1 and 100 characters (inclusive).
- The strings will only contain lowercase English alphabets.","str1 = ""hello"", str2 = ""world""",helloworld,"Input: abc def
Output: abcdef
Input: programming is
Output: programmingis
Input: hello world
Output: helloworld
Input: a b
Output: ab
Input: code forces
Output: codeforces",,,,,
White-19,"Input: 15 25 35
Output: 75
Input: 0 10 0
Output: 10
Input: 100 200 300
Output: 600
Input: 5 5 5
Output: 15",,"The Galactic Snack Bar is tracking its daily sales.  They sell three types of snacks: Fizzbangs, ZapZaps, and Glimmerglobs.  Given the number of each snack sold, calculate the total number of snacks sold.",* The number of each snack type sold will be a non-negative integer.,"Fizzbangs = 10, ZapZaps = 5, Glimmerglobs = 20",35,Variables & Data Types,,,,,
White-20,Prime Check,,"Determine if a given positive integer is a prime number. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.  Your function should return `true` if the number is prime, and `false` otherwise.",* 2 ≤ n ≤ 1000,17,"true

Input: 15","Input: 2
Output: true
Input: 97
Output: true
Input: 100
Output: false
Input: 49
Output: false
Input: 29
Output: true",,,,,
White-21,Input/Output,,Write a program that reads a line of text from the standard input and prints the same line to the standard output.,"- The input line will contain at most 1000 characters.
- The input line will not contain any leading or trailing spaces.","Hello, world!","Hello, world!","Input: This is a test.
Output: This is a test.
Input: 12345
Output: 12345
Input:  Leading and trailing spaces are removed.
Output: Leading and trailing spaces are removed.
Input: !@#$%^&*()
Output: !@#$%^&*()",,,,,
White-N/A,"Operators (Arithmetic, Relational, Logical)",,"Given three integers, determine if their sum is greater than 100. If it is, return the sum; otherwise, return -1.","-1000 ≤ a, b, c ≤ 1000","a = 50, b = 50, c = 10","110

Input: a = 20, b = 30, c = 40","Input: 10 20 80
Output: 110
Input: 10 10 10
Output: -1
Input: 50 50 50
Output: 150
Input: -50, 0, 50
Output: -1
Input: 100, 1, 1
Output: 102",,,,,
White-N/A,"Operators (Arithmetic, Relational, Logical)",,"Given three boolean variables, `a`, `b`, and `c`, determine if the expression `!(a && b) || c` evaluates to `true` or `false`.  Your program should read the boolean values of `a`, `b`, and `c` from standard input and print `true` or `false` to standard output.","- The input will consist of three lines, each containing either ""true"" or ""false"".
- You can assume the input is always valid.","true
false
true",TRUE,"Input: true
true
true
Output: true
Input: false
false
false
Output: true
Input: true
false
false
Output: true
Input: false
true
true
Output: true
Input: true
true
false
Output: false",,,,,
White-22,"Input: 10 20 80
Output: 110
Input: 10 10 10
Output: -1
Input: 50 50 50
Output: 150
Input: -50, 0, 50
Output: -1
Input: 100, 1, 1
Output: 102",,"Given three integers, determine if their sum is greater than 100. If it is, return the sum; otherwise, return -1.","-1000 ≤ a, b, c ≤ 1000","a = 50, b = 50, c = 10","110

Input: a = 20, b = 30, c = 40","Operators (Arithmetic, Relational, Logical)",,,,,
White-23,"Input: true
true
true
Output: true
Input: false
false
false
Output: true
Input: true
false
false
Output: true
Input: false
true
true
Output: true
Input: true
true
false
Output: false",,"Given three boolean variables, `a`, `b`, and `c`, determine if the expression `!(a && b) || c` evaluates to `true` or `false`.  Your program should read the boolean values of `a`, `b`, and `c` from standard input and print `true` or `false` to standard output.","- The input will consist of three lines, each containing either ""true"" or ""false"".
- You can assume the input is always valid.","true
false
true",TRUE,"Operators (Arithmetic, Relational, Logical)",,,,,
White-24,"Loops (for, while)",,"Given a range of numbers (inclusive), calculate the sum of all even numbers within that range.","- The input will consist of two integers, representing the start and end of the range.
- The range will always be valid (start <= end).
- The numbers in the range will be between 1 and 1000 (inclusive).","1, 10",30 (2 + 4 + 6 + 8 + 10),"Input: 1, 5
Output: 6
Input: 10, 20
Output: 165
Input: 5, 15
Output: 50
Input: 1,1000
Output:250500",,,,,
White-25,Modulo Arithmetic,,"Given two integers, `a` and `b`, find the remainder when `a` is divided by `b`.","* `1 <= a, b <= 1000`
* `b` will not be 0.","a = 10, b = 3",1,"Input: 15 4
Output: 3
Input: 20 5
Output: 0
Input: 100 7
Output: 2
Input: 999 10
Output: 9
Input: 1024 1000
Output: 24",,,,,
White-26,Return Values,,Write a function that takes two integers as input and returns their sum.,* The input integers will be within the range of a 32-bit integer.,"5, 10",15,"Input: 25, 75
Output: 100
Input: -10, 10
Output: 0
Input: 1000, 2000
Output: 3000
Input: 0, 0
Output: 0",,,,,
White-27,Palindrome Check,,"Given a string, determine if it's a palindrome (reads the same forwards and backward, ignoring case and non-alphanumeric characters).","- The input string will contain only ASCII characters.
- The string's length will be between 1 and 1000 characters.","""A man, a plan, a canal: Panama""","true

Input: ""race a car""","Input: ""Race car""
Output: true
Input: ""A man, a plan, a canal: Panama""
Output: true
Input: "".,""
Output: true
Input: ""1a2""
Output: false
Input: ""Was it a car or a cat I saw?""
Output: true",,,,,
White-28,Bitwise Operators,,"Given two integers, `a` and `b`, determine if setting the least significant bit of `a` to 1 and clearing the least significant bit of `b` results in `a` being greater than `b`.",- `a` and `b` are non-negative integers.,"a = 5, b = 6","true

(Because 5 with its least significant bit set to 1 is 5 | 1 = 5, and 6 with its least significant bit cleared is 6 & ~1 = 4. 5 > 4, hence true.)","Input: 5 6
Output: true
Input: 10 12
Output: true
Input: 0 1
Output: true
Input: 7 7
Output: false
Input: 2 4
Output: false",,,,,
White-N/A,Bitwise Operators,,"Given an integer `n`, count the total number of set bits (1s) in the binary representation of all numbers from 1 to n (inclusive).",* 1 ≤ n ≤ 10^6,n = 3,4,"Input: 5
Output: 7
Input: 10
Output: 17
Input: 1
Output: 1
Input: 100
Output: 266",,,,,
White-N/A,1D Array Declaration & Traversal,,"Given an array of integers, calculate the sum of all elements in the array.","* The array will contain only integers.
* The array will have at least one element.
* The array will have at most 100 elements.
* The sum of the elements will not exceed the maximum integer value for the language.","[1, 2, 3, 4, 5]",15,"Input: [10, 20, 30]
Output: 60
Input: [-1, 0, 1]
Output: 0
Input: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Output: 10
Input: [100, -50, 25, 75]
Output: 150",,,,,
White-29,Intro to Recursion (factorial),,"Write a function that calculates the factorial of a non-negative integer using recursion.  The factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.","- The input integer will be non-negative.
- The input integer will be less than or equal to 12 to avoid integer overflow in most languages.",5,120,"Input: 0
Output: 1
Input: 1
Output: 1
Input: 7
Output: 5040
Input: 10
Output: 3628800
Input: 12
Output: 479001600",,,,,
White-30,GCD/LCM,,"Given two positive integers, determine if they are co-prime (i.e., their greatest common divisor (GCD) is 1).","- 1 ≤ a, b ≤ 1000","15, 22","Yes

Input: 12, 18","Input: 10, 15
Output: No
Input: 7, 11
Output: Yes
Input: 25, 35
Output: No
Input: 1, 2
Output: Yes
Input: 17, 23
Output: Yes",,,,,
White-31,"Input: 5
Output: 7
Input: 10
Output: 17
Input: 1
Output: 1
Input: 100
Output: 266",,"Given an integer `n`, count the total number of set bits (1s) in the binary representation of all numbers from 1 to n (inclusive).",* 1 ≤ n ≤ 10^6,n = 3,4,Bitwise Operators,,,,,
White-32,"Input: [10, 20, 30]
Output: 60
Input: [-1, 0, 1]
Output: 0
Input: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Output: 10
Input: [100, -50, 25, 75]
Output: 150",,"Given an array of integers, calculate the sum of all elements in the array.","* The array will contain only integers.
* The array will have at least one element.
* The array will have at most 100 elements.
* The sum of the elements will not exceed the maximum integer value for the language.","[1, 2, 3, 4, 5]",15,1D Array Declaration & Traversal,,,,,
White-33,"Basic Array Operations (sum, max, min)",,"Given an array of integers, find the sum, maximum, and minimum values within the array.","* The array will contain at least one element.
* The array will only contain integers.
* The integers can be positive, negative, or zero.","[1, 5, 2, 8, 3]","Sum: 19, Max: 8, Min: 1","Input: [10, 20, 30, 40, 50]
Output: Sum: 150, Max: 50, Min: 10
Input: [-1, 0, 1]
Output: Sum: 0, Max: 1, Min: -1
Input: [5]
Output: Sum: 5, Max: 5, Min: 5
Input: [-5,-10,-15]
Output: Sum: -30, Max: -5, Min: -15",,,,,
White-34,Intro to Time & Space Complexity,,"Given an integer `n`, count the number of sheep from 1 to n.  This seems simple, but let's analyze its time and space complexity!",- `n` will be a non-negative integer.,5,15 (1 + 2 + 3 + 4 + 5),"Input: 0
Output: 0
Input: 10
Output: 55
Input: 100
Output: 5050
Input: 1000
Output: 500500",,,,,
White-35,"Basic Array Operations (sum, max, min)",,"Given an array of integers, find the sum, maximum, and minimum values.","- The array will contain at least one element.
- The array elements will be integers within the range of [-1000, 1000].
- The array size will not exceed 1000 elements.","[1, 5, 2, 8, 3]","Sum: 19, Max: 8, Min: 1","Input: [10, 20, 30, 40, 50]
Output: Sum: 150, Max: 50, Min: 10
Input: [-5, 0, 5, 10, -10]
Output: Sum: 0, Max: 10, Min: -10
Input: [1, 1, 1, 1, 1]
Output: Sum: 5, Max: 1, Min: 1
Input: [-1000, 1000]
Output: Sum: 0, Max: 1000, Min: -1000",,,,,
White-36,Intro to Time & Space Complexity,,"Given an integer `n`, count the number of sheep from 1 to n.  This sounds simple, but let's analyze its efficiency!",- `n` will be a non-negative integer.,5,15 (1 + 2 + 3 + 4 + 5 = 15),"Input: 0
Output: 0
Input: 10
Output: 55
Input: 100
Output: 5050
Input: 1
Output: 1
Input: 7
Output: 28",,,,,
White-37,Basic String Manipulation,,"Given a string, reverse only the vowel words within the string. A vowel word is defined as a word containing at least one vowel (a, e, i, o, u).  Words are separated by spaces.","- The input string will contain only lowercase letters and spaces.
- The input string will not be empty.
- The input string will not contain leading or trailing spaces.
- Words will be separated by single spaces.","""hello world amazing""",olleh dlrow gnizama,"Input: hello world amazing
Output: olleh dlrow gnizama
Input: this is a test
Output: siht is a tset
Input: quick brown rabbit
Output: quick nworb tibbar
Input: aeiou
Output: uoiea",,,,,
White-38,"Conditionals (if-else, switch-case)",,"Write a program that takes a student's numerical score as input and outputs their letter grade based on the following scale:

* 90-100: A
* 80-89: B
* 70-79: C
* 60-69: D
* Below 60: F",* The input score will be an integer between 0 and 100 (inclusive).,85,B,"Input: 95
Output: A
Input: 78
Output: C
Input: 60
Output: D
Input: 55
Output: F
Input: 88
Output: B",,,,,
White-39,"Basic Array Operations (sum, max, min)",,"Given an array of integers, find the sum, maximum, and minimum values.","- The array will contain at least one integer.
- The integers in the array will be within the range of your chosen language's integer type.","[1, 5, 2, 8, 3]","Sum: 19, Max: 8, Min: 1","Input: [10, 20, 30, 40, 50]
Output: Sum: 150, Max: 50, Min: 10
Input: [-1, 0, 1]
Output: Sum: 0, Max: 1, Min: -1
Input: [5]
Output: Sum: 5, Max: 5, Min: 5
Input: [-5, -10, -15]
Output: Sum: -30, Max: -5, Min: -15",,,,,
White-40,GCD/LCM,,"Given two positive integers, find their greatest common divisor (GCD).","* 1 ≤ a, b ≤ 1000","a = 12, b = 18",6,"Input: 48 18
Output: 6
Input: 15 25
Output: 5
Input: 10 5
Output: 5
Input: 7 13
Output: 1",,,,,
White-41,Variables & Data Types,,You're a programmer planning a tropical island hopping adventure!  You need to keep track of the number of islands visited and the total coconut count collected on your journey.  Write a program that takes the number of islands visited and coconuts collected as input and displays these values.,"- The number of islands visited must be a non-negative integer.
- The total number of coconuts collected must be a non-negative integer.",3 15,"Islands Visited: 3, Total Coconuts: 15","Input: 5 20
Output: Islands Visited: 5, Total Coconuts: 20
Input: 0 0
Output: Islands Visited: 0, Total Coconuts: 0
Input: 1 100
Output: Islands Visited: 1, Total Coconuts: 100
Input: 12 345
Output: Islands Visited: 12, Total Coconuts: 345",,,,,
White-42,Type Casting,,"You are given an integer `n`. Your task is to convert this integer to a double, then to a float, then back to an integer, and finally print the final integer value.",* -1000 ≤ n ≤ 1000,123,123,"Input: 345
Output: 345
Input: -99
Output: -99
Input: 0
Output: 0
Input: 1000
Output: 1000
Input: -527
Output: -527",,,,,
White-43,Break & Continue,,"You're navigating a digital labyrinth represented as a list of integers.  Your goal is to find the sum of all even numbers, but you must avoid certain numbers (marked as -1). If you encounter a -1, skip it using 'continue', and if the sum exceeds 100, break out of the loop using 'break'.","- The input list will contain integers between -1 and 1000 (inclusive).
- The list's length will be at most 100.","[2, 4, 6, -1, 8, 10, 12, 14, 16, 18, 20]",56,"Input: [1, 3, 5, 7, 9]
Output: 0
Input: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]
Output: 110
Input: [100, -1, 50, 2, 4, 6, 8]
Output: 100
Input: [-1, -1, -1, 2, 4, 6]
Output: 12",,,,,
White-44,"Loops (for, while)",,"Write a program that calculates the sum of all even numbers from 1 to N, where N is a positive integer provided as input.",- 1 ≤ N ≤ 1000,10,30 (2 + 4 + 6 + 8 + 10),"Input: 5
Output: 6
Input: 100
Output: 2550
Input: 1
Output: 0
Input: 7
Output: 12
Input: 1000
Output: 250500",,,,,
White-45,"Operators (Arithmetic, Relational, Logical)",,"Given three integers, determine if the sum of any two of them is equal to the third.  If so, return 1; otherwise, return 0.","- All three integers will be within the range of [-100, 100].","5, 3, 8","1 (because 5 + 3 = 8)

Input: 2, 7, 10","Input: 10, 5, 15
Output: 1
Input: 2, 4, 6
Output: 1
Input: 1, 2, 4
Output: 0
Input: -5, 0, 5
Output: 1
Input: 100, -50, 50
Output: 1",,,,,
White-46,"Operators (Arithmetic, Relational, Logical)",,"Given two integer inputs, `a` and `b`, determine if the following conditions are met simultaneously:

1. `a` is greater than 10.
2. `b` is less than or equal to 5.
3.  The logical AND of (`a` > 10) and (`b` <= 5) is true, but the logical OR of those same conditions is false.  This is a trick to check for understanding of logical operators.

Your program should output `true` if all three conditions are true; otherwise, output `false`.","-100 ≤ a ≤ 100
-100 ≤ b ≤ 100",15 3,"false

Input: 20 5","Input: 15 3
Output: false
Input: 20 5
Output: false
Input: 12 2
Output: false
Input: 5 10
Output: false
Input: 11 0
Output: false",,,,,
White-47,Palindrome Check,,"Given a string, determine if it is a palindrome. A palindrome is a string that reads the same forwards and backward, ignoring case and non-alphanumeric characters.","- The input string will contain only ASCII characters.
- The length of the string will be between 1 and 1000 characters.","""A man, a plan, a canal: Panama""","true

Input: ""race a car""","Input: ""Racecar""
Output: true
Input: ""A man, a plan, a canal: Panama""
Output: true
Input: ""1a2""
Output: false
Input: "".""
Output: true
Input: "".,""
Output: true",,,,,
White-48,Bitwise Operators,,"Given an integer `n`, determine if it's a power of 2.  A power of 2 is a number of the form 2<sup>k</sup> where k is a non-negative integer.",* 0 <= n <= 10<sup>9</sup>,16,"true

Input: 10","Input: 64
Output: true
Input: 0
Output: false
Input: 21845
Output: false
Input: 1
Output: true
Input: 1024
Output: true",,,,,
White-49,String Reversal,,"Given a string containing words separated by spaces, reverse the order of the words.  Do not reverse the characters within each word.","- The input string will contain only lowercase alphabetical characters and spaces.
- There will be at least one word in the input string.
- Leading and trailing spaces should be ignored.
- Multiple spaces between words are allowed, but only single space should be in the output.","""hello world this is a sentence""","""sentence a is this world hello""","Input: This is a test
Output: test a is This
Input:  Leading and trailing spaces  
Output: spaces trailing and Leading
Input: Multiple spaces between words
Output: words between spaces Multiple
Input: a
Output: a
Input:One Word
Output:Word One",,,,,
White-50,Function Definition & Call,,"Write a function that takes a planet's name and generates a personalized greeting. The greeting should be in the format: ""Greetings from [planet name]! Welcome to the Galactic Federation.""","- The planet name will be a non-empty string.
- The planet name can contain spaces.",Earth,Greetings from Earth! Welcome to the Galactic Federation.,"Input: Kepler-186f
Output: Greetings from Kepler-186f! Welcome to the Galactic Federation.
Input: Mars
Output: Greetings from Mars! Welcome to the Galactic Federation.
Input: Proxima Centauri b
Output: Greetings from Proxima Centauri b! Welcome to the Galactic Federation.
Input:  Alderaan
Output: Greetings from Alderaan! Welcome to the Galactic Federation.",,,,,
White-51,Bitwise Operators,,"Given an integer, write a function that flips the least significant bit (LSB) of the integer. The LSB is the rightmost bit in the binary representation of the integer.",* The input integer will be within the range of a 32-bit signed integer.,10 (binary: 1010),"9 (binary: 1001)

Input: 5 (binary: 0101)","Input: 15
Output: 14
Input: 0
Output: 1
Input: -1
Output: 0
Input: 255
Output: 254
Input: 1023
Output: 1022",,,,,
White-52,Return Values,,Write a function that takes two integers as input and returns their sum.  The function should handle both positive and negative integers.,"- The input integers will be within the range of a 32-bit integer.
- The sum of the two integers will also be within the range of a 32-bit integer.","5, 10","15

Input: -3, 7","Input: 15, 20
Output: 35
Input: -10, 5
Output: -5
Input: 0, 0
Output: 0
Input: -20, -30
Output: -50
Input: 100000, -50000
Output: 50000",,,,,
White-53,Best/Worst/Average Case Basics,,"Given an unsorted array of integers, find the largest element in the array. Analyze the best, worst, and average-case time complexity of your solution.","- The array will contain at least one element.
- The elements in the array are integers.","[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",9,"Input: [1, 5, 2, 8, 3]
Output: 8
Input: [9, 9, 9, 9, 9]
Output: 9
Input: [-1, -5, -2, -8, -3]
Output: -1
Input: [10, 20, 30, 40, 50, 60]
Output: 60",,,,,
White-54,Best/Worst/Average Case Basics,,"Given an unsorted array of integers, find the maximum element in the array. Analyze the best, worst, and average-case time complexities.","- The array will contain at least one element.
- The elements in the array are integers.","[3, 1, 4, 1, 5, 9, 2, 6]",9,"Input: [1, 5, 2, 8, 3]
Output: 8
Input: [9, 9, 9, 9]
Output: 9
Input: [-1, -5, -2, -8, -3]
Output: -1
Input: [10]
Output: 10",,,,,
White-55,Input/Output,,"Write a program that takes two inputs from the user: first, their name (a single word string), and then their age (an integer). After reading these inputs, the program should print a friendly greeting message that includes both the name and age.","- The name will be a single word (no spaces).
- The name will consist only of English alphabet characters.
- The age will be a positive integer between 1 and 120, inclusive.","Sarah
25",Hello Sarah! You are 25 years old.,"Input:
Bob
18
Output:
Hello Bob! You are 18 years old.
Input:
Alice
100
Output:
Hello Alice! You are 100 years old.
Input:
Zoe
7
Output:
Hello Zoe! You are 7 years old.",,,,,
White-56,Parameters & Arguments,,"Welcome, future DSA expert! Your first mission is to build a friendly ""Greeting Machine."" You'll be given a person's name, and your program needs to generate a personalized greeting message. This exercise is all about understanding how to use **parameters** to pass information into a function and **arguments** as the actual values supplied when calling that function.

Imagine you have a robot that says ""Hello, [name]! Welcome to DSA!"". You need to teach your program to take a name, use it to complete the greeting, and then display the full message.","*   The input `name` will be a single word (no spaces).
*   The `name` will consist only of English alphabet characters (a-z, A-Z).
*   The length of the `name` will be between 1 and 50 characters, inclusive.","`Alice`

####","`Hello, Alice! Welcome to DSA!`","Input: Eve
Output: Hello, Eve! Welcome to DSA!
Input: MaximillianAlexander
Output: Hello, MaximillianAlexander! Welcome to DSA!
Input: dEvID
Output: Hello, dEvID! Welcome to DSA!
Input: Charlie
Output: Hello, Charlie! Welcome to DSA!",,,,,
White-57,Basic String Manipulation,,"You are given a string `s` and a character `charToRemove`. Your task is to remove all occurrences of `charToRemove` from `s` and return the new string.

For example, if `s = ""hello world""` and `charToRemove = 'l'`, the result should be `""heo word""`.","* The input string `s` will consist of ASCII characters.
* The length of `s` will be between 0 and 1000 characters.
* The `charToRemove` will be a single ASCII character.
* The removal is case-sensitive.","string s = ""programming""
char charToRemove = 'g'","""proammin""","Input: programming
g
Output: proammin
Input: apple
p
Output: ale
Input: test string
x
Output: test string
Input: 
a
Output: 
Input: AAAAA
A
Output: 
Input: Hello World
l
Output: Heo Word",,,,,
White-58,Prime Check,,"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. In other words, a prime number has exactly two distinct positive divisors: 1 and the number itself.

Your task is to write a program that takes an integer `N` as input and determines whether it is a prime number. The program should output ""true"" if `N` is prime, and ""false"" otherwise.","- `0 <= N <= 1,000,000`","**
7

**","**
true

**","Input: 0
Output: false
Input: 2
Output: true
Input: 3
Output: true
Input: 9
Output: false
Input: 999983
Output: true",,,,,
White-59,Intro to Recursion (factorial),,"The factorial of a non-negative integer `n`, denoted as `n!`, is the product of all positive integers less than or equal to `n`. For example, `5! = 5 * 4 * 3 * 2 * 1 = 120`. An important special case is `0!`, which is defined as `1`.

Your task is to write a function that calculates the factorial of a given non-negative integer `n` using recursion. This problem is designed to introduce you to the fundamental concepts of recursion: defining a base case and a recursive step.","*   `0 <= n <= 12` (The result for `n=13` and above might exceed the capacity of a standard 32-bit integer, and for larger values, the call stack might overflow, depending on the language and environment.)","**

5

**","**

120

**","Input: 0
Output: 1
Input: 1
Output: 1
Input: 3
Output: 6
Input: 7
Output: 5040
Input: 12
Output: 479001600",,,,,
White-60,Parameters & Arguments,,You're building a simple program that greets users personally. Your task is to implement a function that takes a person's name as an input and then prints a friendly greeting using that name. This problem focuses on understanding how to define a function that accepts parameters and how to pass arguments to it.,"* The name will be a single line of text.
* The name will consist of English letters and spaces.
* The length of the name will be between 1 and 50 characters, inclusive.","Alice

####","Hello, Alice! Welcome to the program.","Input: Bob
Output: Hello, Bob! Welcome to the program.
Input: Charlie Brown
Output: Hello, Charlie Brown! Welcome to the program.
Input: Ada Lovelace
Output: Hello, Ada Lovelace! Welcome to the program.
Input: Z
Output: Hello, Z! Welcome to the program.
Input: SuperLongNameWithLotsOfCharactersToTestTheConstraints
Output: Hello, SuperLongNameWithLotsOfCharactersToTestTheConstraints! Welcome to the program.",,,,,
White-61,1D Array Declaration & Traversal,,"You're given a list of `N` integers. Your task is to read these integers, store them in a 1D array, and then print them out in reverse order, with each number separated by a space.","*   `1 <= N <= 100`
*   `-1000 <= element <= 1000` (Each integer in the list)",,,"Input: 1
500
Output: 500
Input: 3
1 2 3
Output: 3 2 1
Input: 4
-5 0 10 -20
Output: -20 10 0 -5
Input: 6
100 200 300 400 500 600
Output: 600 500 400 300 200 100",,,,,
White-62,1D Array Declaration & Traversal,,"You are given a list of `N` integers. Your task is to read these integers into a 1D array and then print them out in reverse order, separated by spaces.

For example, if the input integers are `10 20 30`, you should print `30 20 10`.","*   `1 <= N <= 100` (The number of integers will be between 1 and 100)
*   Each integer will be between `1` and `1000`.","3
10 20 30


####",30 20 10,"Input: 1
50
Output: 50
Input: 2
100 200
Output: 200 100
Input: 5
1 2 3 4 5
Output: 5 4 3 2 1
Input: 4
99 88 77 66
Output: 66 77 88 99",,,,,
White-63,Modulo Arithmetic,,"Imagine a 24-hour clock. Given the current hour and a number of hours that will pass, your task is to determine what the hour will be after the duration has passed. The clock operates from 0 to 23 (e.g., 0 is midnight, 13 is 1 PM, 23 is 11 PM).","*   `0 <= current_hour <= 23`
*   `0 <= duration_hours <= 1000`
*   The final hour should also be between 0 and 23.","**

10
5

This means `current_hour = 10` and `duration_hours = 5`.

**","**

15","Input: 0
0
Output: 0
Input: 23
1
Output: 0
Input: 12
24
Output: 12
Input: 5
40
Output: 21
Input: 1
1000
Output: 17",,,,,
White-64,Modulo Arithmetic,,"You are given three positive integers: `a`, `b`, and `m`. Your task is to find the sum of `a` and `b`, and then calculate the remainder when this sum is divided by `m`. In mathematical terms, you need to compute `(a + b) % m`.","*   `1 <= a, b, m <= 1000`","**
`a = 5`
`b = 7`
`m = 5`

**","**
`2`

**","Input: 1 1 10
Output: 2
Input: 5 5 10
Output: 0
Input: 9 8 5
Output: 2
Input: 1 1 1
Output: 0
Input: 1000 1000 999
Output: 2",,,,,
White-65,Modulo Arithmetic,,"You are given two integers, `a` and `b`, and a modulus `m`. Your task is to calculate the sum of `a` and `b`, and then find the remainder when this sum is divided by `m`. In mathematical terms, you need to compute `(a + b) % m`.","* `0 <= a, b <= 10^9`
* `1 <= m <= 10^9`","5
7
3

####","0

####","Input: 10
15
7
Output: 4
Input: 1
1
2
Output: 0
Input: 1000000000
1000000000
999999999
Output: 2
Input: 0
0
5
Output: 0",,,,,
White-66,Intro to Time & Space Complexity,,"You're given a positive integer `N`. Your task is to calculate the sum of all positive integers from 1 up to `N` (inclusive).

For example, if `N` is 3, the sum would be 1 + 2 + 3 = 6.",* `1 <= N <= 1000`,"3

####",6,"Input: 1
Output: 1
Input: 5
Output: 15
Input: 10
Output: 55
Input: 100
Output: 5050",,,,,
White-67,Intro to Time & Space Complexity,,You are given an array of integers. Your task is to calculate the sum of all its elements. This is a great starting point to understand how to iterate through data structures and analyze the resources your code uses.,"* The array will contain between 1 and 100 integers, inclusive.
* Each integer in the array will be between -100 and 100, inclusive.","3
1 2 3


####","6


####","Input: 5
10 20 30 40 50
Output: 150
Input: 1
-7
Output: -7
Input: 4
-1 -2 -3 -4
Output: -10
Input: 2
0 0
Output: 0",,,,,
White-68,Input/Output,,"You are given a single integer as input. Your task is to read this integer, calculate its square (the number multiplied by itself), and then print the result to standard output.

This problem is designed to introduce you to basic input/output operations and simple arithmetic in your chosen programming language.",*   The input integer `N` will be between 1 and 1000 (inclusive).,"5


####",25,"Input: 1
Output: 1
Input: 10
Output: 100
Input: 1000
Output: 1000000
Input: 50
Output: 2500",,,,,
White-69,Best/Worst/Average Case Basics,,"You are given an array of integers and a target integer. Your task is to implement a linear search algorithm to find the target in the array. In addition to returning the index of the target (or -1 if not found), you must also count the total number of comparisons made during the search.

This problem helps you understand the concepts of Best, Worst, and Average case time complexity by observing how the number of comparisons changes based on the target's position.","- The array `nums` will have a length `N` between 1 and 100.
- Each element `nums[i]` will be an integer between -100 and 100.
- The target integer `target` will be between -100 and 100.","**
N = 5
nums = [10, 20, 30, 40, 50]
target = 30

**","**
Found at index 2 in 3 comparisons

**Input:**
N = 4
nums = [5, 15, 25, 35]
target = 40

**","Input:
7
1 2 3 4 5 6 7
1
Output:
Found at index 0 in 1 comparisons
Input:
5
-10 -5 0 5 10
10
Output:
Found at index 4 in 5 comparisons
Input:
6
100 90 80 70 60 50
45
Output:
Not found in 6 comparisons
Input:
1
42
42
Output:
Found at index 0 in 1 comparisons
Input:
1
42
99
Output:
Not found in 1 comparisons",,,,,
White-70,String Reversal,,"Your task is to write a program that takes a given string and reverses the order of its characters. For example, if the input is ""hello"", the output should be ""olleh"". This is a fundamental problem that helps build a strong understanding of string manipulation and iteration.","*   The input string will contain printable ASCII characters (letters, numbers, symbols, and spaces).
*   The length of the input string will be between 0 and 1000 characters, inclusive.
*   An empty string should remain an empty string.",hello,"olleh



Input: world","Input: racecar
Output: racecar
Input: a
Output: a
Input: 
Output: 
Input: Hello World!
Output: !dlroW olleH
Input: 123456789
Output: 987654321",,,,,
White-71,Bitwise Operators,,"You are given an integer `num` and a non-negative integer `n`. Your task is to toggle (flip) the `n`-th bit of `num` and return the new integer. The `n`-th bit is 0-indexed, meaning the 0-th bit is the rightmost (least significant) bit.","*   `0 <= num <= 10^9`
*   `0 <= n <= 30`","**

num = 4
n = 1


**Explanation:**
1.  The decimal number `4` in binary is `...0100`.
2.  The `n`-th bit is the 1st bit (0-indexed). In `...0100`, the 1st bit is currently `0`.
3.  To toggle this bit means to flip its value from `0` to `1`.
4.  After flipping, the binary representation becomes `...0110`.
5.  The binary `...0110` is `6` in decimal.

**","**

6","Input: 7 0
Output: 6
Input: 10 3
Output: 2
Input: 0 5
Output: 32
Input: 25 2
Output: 29
Input: 1 0
Output: 0",,,,,
White-72,"Operators (Arithmetic, Relational, Logical)",,"You are given three integers: `num1`, `num2`, and `num3`. Your task is to perform two distinct calculations and print their results.

1.  **Arithmetic Calculation**: Calculate the value of `(num1 + num2) * num3`.
2.  **Logical Calculation**: Evaluate the boolean expression `(num1 > num2) && (num2 < num3)`.

Print the result of the arithmetic calculation on the first line, and the result of the logical calculation (as `true` or `false` or their equivalent in the respective language, e.g., `1` or `0` for C/C++, `True` or `False` for Python) on the second line.","- `1 <= num1, num2, num3 <= 1000`","10
5
20

####","300
true

####","Input: 1
2
3
Output: 9
false
Input: 100
50
25
Output: 3750
false
Input: 7
7
7
Output: 98
false
Input: 1000
1
500
Output: 500500
true",,,,,
White-73,Prime Check,,"You've been tasked with a critical mission: to determine if a given positive integer is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your program should read an integer and output ""Yes"" if it's prime, and ""No"" otherwise.","*   `1 <= N <= 1,000,000`","**
7

**","**
Yes

**Input:**
10

**","Input: 1
Output: No
Input: 2
Output: Yes
Input: 4
Output: No
Input: 13
Output: Yes
Input: 999983
Output: Yes",,,,,
White-74,Parameters & Arguments,,Write a program that takes a string and an integer as input. The program should then print the given string the specified number of times.,"*   The input string will not contain any newlines.
*   The integer will be a non-negative integer.",Hello 3,"Hello
Hello
Hello","Input: Test 2
Output:
Test
Test
Input: Code 4
Output:
Code
Code
Code
Code
Input: Hello_World 1
Output:
Hello_World
Input: Empty 0
Output:
",,,,,
White-75,Break & Continue,,"Given an integer `limit` and an integer `skip_value`, print all numbers from 1 to `limit` (inclusive), skipping the multiples of `skip_value`.","*   `1 <= limit <= 100`
*   `1 <= skip_value <= 10`",,,"Input: 10 3
Output: 1 2 4 5 7 8 10
Input: 15 5
Output: 1 2 3 4 6 7 8 9 11 12 13 14
Input: 7 2
Output: 1 3 5 7
Input: 5 1
Output: 
Input: 20 4
Output: 1 2 3 5 6 7 9 10 11 13 14 15 17 18 19",,,,,
White-76,Type Casting,,"You are given an integer `A` and a double-precision floating-point number `B`. Your task is to perform specific type conversions and calculations:

1.  **Integer to Double:** Convert integer `A` to a `double` and store it in a new variable, say `double_A`.
2.  **Double to Integer:** Convert double `B` to an `integer` (truncating any decimal part) and store it in a new variable, say `int_B`.
3.  **Double Sum:** Calculate the sum of `double_A` (the converted `A`) and the original `double B`. Store this in `double_sum`.
4.  **Integer Sum:** Calculate the sum of the original `integer A` and `int_B` (the converted `B`). Store this in `int_sum`.

Finally, print the four resulting values (`double_A`, `int_B`, `double_sum`, `int_sum`) in the order specified, each on a new line. Floating-point numbers should be printed with two decimal places.","- `-1000 <= A <= 1000`
- `-1000.0 <= B <= 1000.0`
- Input will consist of a single line with `A` followed by `B`, separated by a space.",`10 5.75`,"10.00
5
15.75
15","Input: -7 3.14
Output: -7.00
3
-3.86
-4
Input: 0 0.99
Output: 0.00
0
0.99
0
Input: 999 999.99
Output: 999.00
999
1998.99
1998
Input: -1000 -10.5
Output: -1000.00
-10
-1010.50
-1010",,,,,
White-77,Intro to Time & Space Complexity,,"Imagine you're tracking scores in a game, and you want to know how many players scored above a certain benchmark. Your task is to implement a function that takes a list of integer scores and a threshold integer. It should return the total count of scores that are strictly greater than the given threshold.","*   `1 <= N <= 100` (where `N` is the number of scores in the input list)
*   `0 <= score[i] <= 1000` (each individual score will be between 0 and 1000)
*   `0 <= threshold <= 1000` (the threshold will also be between 0 and 1000)","**
`scores = [10, 20, 5, 30, 15]`
`threshold = 12`

**","**
`3`

**","Input: 5
1 2 3 4 5
0
Output: 5
Input: 3
100 200 300
500
Output: 0
Input: 4
7 7 7 7
7
Output: 0
Input: 1
50
49
Output: 1
Input: 10
10 20 30 40 50 60 70 80 90 100
75
Output: 3",,,,,
White-78,Variables & Data Types,,"Welcome, White Belt! In this problem, you'll practice one of the most fundamental concepts in programming: using variables to store different types of data and then displaying them. Your task is to read three distinct pieces of information from the user:
1. An integer number.
2. A floating-point number (a number with decimals).
3. A single word (a string).

After reading these inputs, you must store each of them in a variable of the appropriate data type. Finally, you will print all the stored values back to the console, following a specific format, and also show the integer value incremented by one.","*   The integer number will be between 1 and 100 (inclusive).
*   The floating-point number will be between 0.0 and 100.0 (inclusive).
*   The string will be a single word, containing only alphabetical characters, with a maximum length of 10 characters.","10
3.14
Hello


####","You entered:
Integer: 10
Float: 3.14
String: Hello
Next Integer: 11","Input: 5
1.23
World
Output: You entered:
Integer: 5
Float: 1.23
String: World
Next Integer: 6
Input: 99
99.99
Test
Output: You entered:
Integer: 99
Float: 99.99
String: Test
Next Integer: 100
Input: 1
0.0
Start
Output: You entered:
Integer: 1
Float: 0.00
String: Start
Next Integer: 2
Input: 50
25.5
MidPoint
Output: You entered:
Integer: 50
Float: 25.50
String: MidPoint
Next Integer: 51",,,,,
White-79,Intro to Recursion (factorial),,"Welcome to your first dive into the world of recursion! Your task is to calculate the factorial of a given non-negative integer `n`. The factorial of a non-negative integer `n`, denoted by `n!`, is the product of all positive integers less than or equal to `n`. For example, `5! = 5 × 4 × 3 × 2 × 1 = 120`. A special case is `0!`, which is defined as `1`.

You must implement the factorial calculation **recursively**. This means your function should call itself to solve smaller sub-problems until it reaches a simple base case.","*   `0 <= n <= 12`
*   The input `n` will always be a non-negative integer.
*   The result will fit within a standard 64-bit integer type (like `long long` in C++ or `long` in Java).","**

5


**","**

120","Input: 0
Output: 1
Input: 1
Output: 1
Input: 3
Output: 6
Input: 7
Output: 5040
Input: 10
Output: 3628800",,,,,
White-80,Function Definition & Call,,"You need to write a program that calculates a ""doubled sum"". Specifically, your program should read two integers, calculate their sum, and then multiply that sum by 2. This core logic must be encapsulated within a function. Your main program will read the inputs, call this function, and print the result.",- The input integers `num1` and `num2` will be between -1000 and 1000.,"5
3",16,"Input: 10
20
Output: 60
Input: -5
-3
Output: -16
Input: 10
-7
Output: 6
Input: 0
0
Output: 0
Input: 15
0
Output: 30",,,,,
White-81,Return Values,,"You've been hired by a magical shop that specializes in duplicating items! Your first task is to write a program that calculates the ""doubled value"" of any given integer.

Specifically, you need to create a function that takes one integer as input, multiplies it by 2, and then returns the result. Your `main` (or equivalent) function should read an integer, call your duplicating function, and print the returned doubled value.","*   The input integer `N` will be between -1000 and 1000, inclusive.","5

####","10


####","Input: -7
Output: -14
Input: 0
Output: 0
Input: 500
Output: 1000
Input: -499
Output: -998",,,,,
White-85,Type Casting,,"Welcome, White Belt coder! In this problem, you'll explore the fundamental concept of ""type casting,"" which is how you convert data from one type to another. You will be given two numbers: an integer and a floating-point number (decimal). Your task is to perform two specific type conversions and print the results.

Specifically, you need to:
1. Convert the given integer into a floating-point number.
2. Convert the given floating-point number into an integer.

Pay attention to how different languages handle these conversions and potential data loss when converting from a floating-point number to an integer.","- The input integer `N` will be within the range of standard integer types (e.g., -2 * 10^9 to 2 * 10^9).
- The input floating-point number `D` will be within the range of standard double/float types (e.g., -10^18 to 10^18).
- Inputs will always be valid numbers.","**
15
5.75

**","**
15.000000
5

_Note: The number of decimal places for the float output might vary slightly by language, but the value should be equivalent. We will aim for 6 decimal places where possible._","Input:
-10
-3.14
Output:
-10.000000
-3
Input:
0
0.0
Output:
0.000000
0
Input:
2147483647
12345.6789
Output:
2147483647.000000
12345
Input:
99
4.999999
Output:
99.000000
4
Input:
-5
9.123
Output:
-5.000000
9",,,,,
Yellow-2,Insertion Sort,,"You are given an unsorted array of integers. Your task is to sort this array in ascending order using the Insertion Sort algorithm.

Insertion Sort works by taking one element at a time from the unsorted part and inserting it into its correct position within the already sorted part of the array. This process continues until all elements are in their sorted positions.","- `1 <= n <= 1000` (where `n` is the number of elements in the array)
- `-1000 <= arr[i] <= 1000` (where `arr[i]` is an element in the array)
- The input array will contain only integers.","6
5 2 4 6 1 3

####",1 2 3 4 5 6,"Input: 5
1 2 3 4 5
Output: 1 2 3 4 5
Input: 5
5 4 3 2 1
Output: 1 2 3 4 5
Input: 5
4 2 1 4 3
Output: 1 2 3 4 4
Input: 1
7
Output: 7
Input: 4
-3 0 -1 2
Output: -3 -1 0 2",,,,,
White-88,"Operators (Arithmetic, Relational, Logical)",,"You are given two integers, `num1` and `num2`. Your task is to determine if both numbers collectively satisfy a specific set of criteria. You need to combine the results of several individual checks using logical operators.

The conditions are:
1.  `num1` must be an even number.
2.  `num2` must be a positive number (strictly greater than 0).
3.  The sum of `num1` and `num2` must be strictly less than 50.
4.  The product of `num1` and `num2` must be strictly greater than 0.

If all four conditions are met, your function should return `true`. Otherwise, it should return `false`.","*   `num1` and `num2` will be integers.
*   `-100 <= num1, num2 <= 100`","**

10
5


**","**

true


**","Input: 7
10
Output: false
Input: 4
-2
Output: false
Input: 20
30
Output: false
Input: 8
0
Output: false
Input: 2
20
Output: true",,,,,
White-89,"Array, String",,"Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.

Example 1:

Input: word1 = [""ab"", ""c""], word2 = [""a"", ""bc""]
Output: true
Explanation:
word1 represents string ""ab"" + ""c"" -> ""abc""
word2 represents string ""a"" + ""bc"" -> ""abc""
The strings are the same, so return true.

Example 2:

Input: word1 = [""a"", ""cb""], word2 = [""ab"", ""c""]
Output: false

Example 3:

Input: word1  = [""abc"", ""d"", ""defg""], word2 = [""abcddefg""]
Output: true

Constraints:

	1 3
	1 3
	1 3
	word1[i] and word2[i] consist of lowercase letters.",,,,"[""ab"", ""c""]
[""a"", ""bc""]
[""a"", ""cb""]
[""ab"", ""c""]
[""abc"", ""d"", ""defg""]
[""abcddefg""]",,,,,
DELETE-89-check-if-two-string-arrays-are-equivalent,Deletion,N/A,Deleted folder: 89-check-if-two-string-arrays-are-equivalent,N/A,N/A,N/A,N/A,,,,,
White-89,"Array, String, String Matching",,"Given an array of string words, return all strings in words that are a substring of another word. You can return the answer in any order.

Example 1:

Input: words = [""mass"",""as"",""hero"",""superhero""]
Output: [""as"",""hero""]
Explanation: ""as"" is substring of ""mass"" and ""hero"" is substring of ""superhero"".
[""hero"",""as""] is also a valid answer.

Example 2:

Input: words = [""leetcode"",""et"",""code""]
Output: [""et"",""code""]
Explanation: ""et"", ""code"" are substring of ""leetcode"".

Example 3:

Input: words = [""blue"",""green"",""bu""]
Output: []
Explanation: No string of words is substring of another string.

Constraints:

	1 
	1 
	words[i] contains only lowercase English letters.
	All the strings of words are unique.",,,,"[""mass"",""as"",""hero"",""superhero""]
[""leetcode"",""et"",""code""]
[""blue"",""green"",""bu""]",,,,,
White-90,GCD/LCM,,"You are given two positive integers, `a` and `b`. Your task is to find their Greatest Common Divisor (GCD) and Least Common Multiple (LCM).

The Greatest Common Divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. For example, the GCD of 12 and 18 is 6.

The Least Common Multiple (LCM) of two integers is the smallest positive integer that is a multiple of both numbers. For example, the LCM of 12 and 18 is 36.

You need to output both GCD and LCM for the given pair of numbers.","*   `1 <= a, b <= 10^5`
*   `a` and `b` are positive integers.","12 18

####","GCD: 6
LCM: 36","Input: 7 13
Output: GCD: 1
LCM: 91
Input: 100 75
Output: GCD: 25
LCM: 300
Input: 48 36
Output: GCD: 12
LCM: 144
Input: 5 5
Output: GCD: 5
LCM: 5",,,,,
White-91,"Loops (for, while)",,"You are tasked with writing a program that calculates the sum of all even numbers up to a given positive integer `N`, inclusive. For example, if `N` is 7, the even numbers within the range [1, 7] are 2, 4, and 6, and their sum is 12.",* `1 <= N <= 1000`,"**

7

**","**

12","Input: 1
Output: 0
Input: 2
Output: 2
Input: 10
Output: 30
Input: 99
Output: 2450
Input: 1000
Output: 250500",,,,,
Yellow-3,2D Arrays / Matrix Operations,,"You are given a 2D integer array (matrix). Your task is to calculate the sum of all elements that lie on the perimeter of the matrix. The perimeter includes all elements in the first row, last row, first column, and last column. Be careful not to double-count elements that are part of multiple perimeter segments (i.e., the corner elements).","*   `1 <= rows, cols <= 100` (where `rows` is the number of rows and `cols` is the number of columns).
*   `-1000 <= matrix[i][j] <= 1000` (elements can be positive, negative, or zero).","3 3
1 2 3
4 5 6
7 8 9

####","40


####","Input: 1 1
5
Output: 5
Input: 1 4
10 20 30 40
Output: 100
Input: 4 1
1
2
3
4
Output: 10
Input: 2 2
1 2
3 4
Output: 10
Input: 4 3
1 -2 3
4 5 6
7 8 9
-10 11 -12
Output: 1",,,,,
Yellow-4,Sliding Window Intro,,You are given an array of integers `arr` and an integer `k`. Your task is to find the maximum sum of a subarray of `arr` that has a length exactly `k`. This means you need to consider all possible contiguous subarrays of size `k` and determine which one has the largest sum.,"*   `1 <= arr.length <= 10^5`
*   `1 <= k <= arr.length`
*   `0 <= arr[i] <= 1000` (Elements are non-negative to keep it simple for an intro problem)
*   The sum of any subarray will fit within a standard integer type.","**

6
2 1 5 1 3 2
3

**","**

9


**","Input: 5
1 2 3 4 5
3
Output: 12
Input: 1
100
1
Output: 100
Input: 7
10 2 3 4 5 6 7
4
Output: 22
Input: 8
1 1 1 1 1 1 1 1
2
Output: 2
Input: 6
1 2 3 4 5 0
3
Output: 12",,,,,
Yellow-5,Doubly Linked List basics,,"You're tasked with enhancing a Doubly Linked List (DLL) by implementing a function to append a new node to its very end. Given the head and tail of an existing DLL (which might be empty) and an integer value, your goal is to create a new node with this value and add it as the new tail of the list. Remember to correctly update all `next` and `prev` pointers, including those of the old tail (if it exists) and the new node itself.","*   The input list can be empty.
*   The number of nodes `N` in the initial list will be between `0` and `1000`.
*   The value `V` to insert will be an integer between `-10^9` and `10^9`.
*   The `head` and `tail` pointers should always correctly point to the beginning and end of the list, respectively, after the operation.","**

1 2 3
4

(Initial DLL: `1 <-> 2 <-> 3`, Value to insert: `4`)

**","**

1 <-> 2 <-> 3 <-> 4


#### Example 2:
**Input:**

EMPTY
5

(Initial DLL: `Empty List`, Value to insert: `5`)

**","Input: 10
20
Output: 10 <-> 20
Input: 1 2 3 4 5
0
Output: 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 0
Input: -5 -4 -3
-2
Output: -5 <-> -4 <-> -3 <-> -2
Input: 7
7
Output: 7 <-> 7",,,,,
Yellow-6,Stack Implementation (Array/LL),,"Your mission is to implement a basic Stack data structure that supports four fundamental operations: `push`, `pop`, `top`, and `isEmpty`. You will receive a sequence of commands, and your program must process them, outputting results for `pop`, `top`, and `isEmpty` operations.

The stack should adhere to the Last-In, First-Out (LIFO) principle. For operations that attempt to `pop` or retrieve `top` from an empty stack, a specific error value (`-1`) should be returned. Similarly, `push` operations should handle the case where the stack is at its maximum capacity.","*   The stack will have a maximum capacity of `1000` elements.
*   The number of operations `N` will be between `1` and `1000`.
*   Values pushed onto the stack will be integers between `-10^9` and `10^9`.
*   Operations will be one of the following strings:
    *   `push <value>`: Adds `value` to the top of the stack.
    *   `pop`: Removes and returns the top element.
    *   `top`: Returns the top element without removing it.
    *   `isEmpty`: Returns `true` if the stack is empty, `false` otherwise.","8
push 10
push 20
pop
top
isEmpty
pop
pop
isEmpty


####","20
10
false
10
-1
true","Input: 3
pop
top
isEmpty
Output: -1
-1
true
Input: 12
push 1
push 2
push 3
push 4
push 5
push 6
top
pop
top
pop
top
pop
isEmpty
Output: 5
5
4
4
3
3
false
Input: 7
push 100
pop
isEmpty
push 200
top
pop
isEmpty
Output: 100
true
200
200
true",,,,,
Yellow-7,Bubble Sort,,"You are given an array of integers. Your task is to sort this array in ascending order using the Bubble Sort algorithm.

Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.","*   `1 <= N <= 1000` (where N is the number of elements in the array)
*   `-10^9 <= array[i] <= 10^9`
*   The array may contain duplicate elements.","**

5
5 1 4 2 8


**","**

1 2 4 5 8","Input: 5
1 2 3 4 5
Output: 1 2 3 4 5
Input: 5
5 4 3 2 1
Output: 1 2 3 4 5
Input: 7
3 1 4 1 5 9 2
Output: 1 1 2 3 4 5 9
Input: 1
42
Output: 42
Input: 2
7 3
Output: 3 7",,,,,
Yellow-8,Bubble Sort,,"You've been given an array of integers. Your task is to sort this array in ascending order using the Bubble Sort algorithm. Bubble sort works by repeatedly stepping through the list, comparing adjacent elements and swapping them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.","*   The number of elements `n` in the array will be between 1 and 1000.
*   Each element `arr[i]` will be an integer between -10000 and 10000.","`[5, 1, 4, 2, 8]`","`[1, 2, 4, 5, 8]`

**","Input: 5
1 2 3 4 5
Output: 1 2 3 4 5
Input: 5
5 4 3 2 1
Output: 1 2 3 4 5
Input: 8
3 1 4 1 5 9 2 6
Output: 1 1 2 3 4 5 6 9
Input: 1
7
Output: 7
Input: 5
-5 0 -2 3 1
Output: -5 -2 0 1 3",,,,,
Yellow-9,Bubble Sort,,"You are tasked with sorting an array of integers in ascending order using the Bubble Sort algorithm. Bubble Sort is a simple comparison-based sorting algorithm. It works by repeatedly stepping through the list, comparing adjacent elements and swapping them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.

Your program should read an integer `N`, followed by `N` integers representing the elements of the array. It should then apply Bubble Sort and print the sorted array.","*   `1 <= N <= 100`
*   `0 <= arr[i] <= 1000`","**

5
5 1 4 2 8


**","**

1 2 4 5 8","Input: 1
7
Output: 7
Input: 4
4 3 2 1
Output: 1 2 3 4
Input: 6
5 2 8 2 5 1
Output: 1 2 2 5 5 8
Input: 5
10 20 30 40 50
Output: 10 20 30 40 50
Input: 9
99 11 77 33 55 22 88 44 66
Output: 11 22 33 44 55 66 77 88 99",,,,,
Yellow-10,Selection Sort,,You are given an array of integers. Your task is to sort this array in ascending order using the Selection Sort algorithm. Selection Sort works by repeatedly finding the minimum element from the unsorted part and putting it at the beginning of the unsorted part.,"* `1 <= n <= 1000` (where `n` is the number of elements in the array)
* `-1000 <= arr[i] <= 1000`
* The array may contain duplicate elements.","**
`[64, 25, 12, 22, 11]`

**","**
`[11, 12, 22, 25, 64]`

**","Input: 5
1 2 3 4 5
Output: 1 2 3 4 5
Input: 7
5 4 3 2 1 0 -1
Output: -1 0 1 2 3 4 5
Input: 6
4 2 1 4 3 5
Output: 1 2 3 4 4 5
Input: 4
-5 -2 0 -10
Output: -10 -5 -2 0
Input: 1
7
Output: 7",,,,,
White-92,Intro to Time & Space Complexity,,"You are given a list (or array) of whole numbers. Your task is to find the single largest number within this list. For example, if the list is `[3, 1, 7, 4, 2]`, the largest number is `7`.","*   The input array will contain at least one element.
*   The number of elements in the array (N) will be between 1 and 1000.
*   Each element in the array will be an integer between -1000 and 1000.","**

5
5 2 9 1 7


**","**

9","Input: 5
10 20 5 30 15
Output: 30
Input: 3
-5 -1 -10
Output: -1
Input: 1
100
Output: 100
Input: 7
7 7 7 7 7 7 7
Output: 7
Input: 4
-10 0 10 -20
Output: 10",,,,,
White-93,LeetCode,,,,,,"Input: [1,2,0]
Output: [0,1,2],Input: [2,0,1,0]
Output: [0,0,1,2],Input: [0,1,2,0,1,2]
Output: [0,0,1,1,2,2],Input: [2,1,0,1,2,0]
Output: [0,0,1,1,2,2],Input: []
Output: []",,,,,
,,,,,,,,,,,,
White-93,1D Array Declaration & Traversal,,"Given an integer array, traverse the array and print each element.","- The array will contain at least one element.
- The array will contain only integers.
- The maximum size of the array is 100.","[1, 2, 3, 4, 5]",1 2 3 4 5,"Input: [1, 2, 3]
Output: 1 2 3,Input: [10, 20, 30, 40, 50]
Output: 10 20 30 40 50,Input: [-1, 0, 1]
Output: -1 0 1,Input: [5, 4, 3, 2, 1]
Output: 5 4 3 2 1",,,,,
Yellow-11,Naive Pattern Search,"- String manipulation
- Basic iteration
- Algorithm implementation
- Pattern matching","Implement a naive pattern searching algorithm to find all occurrences of a pattern within a text string.  The algorithm should iterate through the text and compare each character to the pattern. If a mismatch occurs, it moves to the next character in the text. If a match is found, the index of the match is recorded.","- The text and pattern will only contain lowercase English alphabet characters ('a' - 'z').
- The pattern's length will be less than or equal to the text's length.
- The pattern can appear multiple times in the text, possibly overlapping.",,,"Input: text = ""abcabcabc"", pattern = ""abc""
Output: [0, 3, 6],Input: text = ""abababab"", pattern = ""aba""
Output: [0, 2, 4],Input: text = ""hello world"", pattern = ""world""
Output: [6],Input: text = ""aaaa"", pattern = ""aa""
Output: [0, 1, 2],Input: text = ""mississippi"", pattern = ""issi""
Output: [4]",,,,,
Yellow-11,Naive Pattern Search,,"Implement a naive pattern searching algorithm to find all occurrences of a pattern within a text string.  The algorithm should iterate through the text and compare each character to the pattern. If a mismatch occurs, it moves to the next character in the text. If a match is found, the index of the match is recorded.","- The text and pattern will only contain lowercase English alphabet characters ('a' - 'z').
- The pattern's length will be less than or equal to the text's length.
- The pattern can appear multiple times in the text, possibly overlapping.",,,"Input: text = ""abcabcabc"", pattern = ""abc""
Output: [0, 3, 6],Input: text = ""abababab"", pattern = ""aba""
Output: [0, 2, 4],Input: text = ""hello world"", pattern = ""world""
Output: [6],Input: text = ""aaaa"", pattern = ""aa""
Output: [0, 1, 2],Input: text = ""mississippi"", pattern = ""issi""
Output: [4]",,,,,
Yellow-12,Recursive Power Function,"- Recursion
- Handling negative exponents
- Floating-point arithmetic",Write a function that calculates x raised to the power of n (xⁿ) recursively.  Handle both positive and negative exponents.,"- -100 ≤ x ≤ 100
- -10 ≤ n ≤ 10
- x != 0 when n < 0","x = 2, n = 3","8

Input: x = 5, n = -2","Input: 2 3
Output: 8.00
Input: 5 -2
Output: 0.04
Input: 3 0
Output: 1.00
Input: -2 3
Output: -8.00
Input: 10 2
Output: 100.00",,,,,
Yellow-12,Recursive Power Function,,Write a function that calculates x raised to the power of n (xⁿ) recursively.  Handle both positive and negative exponents.,"- -100 ≤ x ≤ 100
- -10 ≤ n ≤ 10
- x != 0 when n < 0","x = 2, n = 3","8

Input: x = 5, n = -2","Input: 2 3
Output: 8.00
Input: 5 -2
Output: 0.04
Input: 3 0
Output: 1.00
Input: -2 3
Output: -8.00
Input: 10 2
Output: 100.00",,,,,
Yellow-14,Binary Search,"*   **Binary Search**: This problem asks for the *minimum* `k` that satisfies a certain condition. The time it takes to eat all bananas is a monotonically decreasing function with respect to `k` (i.e., faster `k` means less time). This property makes it a perfect candidate for binary search on the answer space.
*   **Ceiling Division**: When calculating the time taken to eat a pile of `p` bananas at speed `k`, if `p` is not perfectly divisible by `k`, Koko still spends a full hour on the remaining bananas. This is equivalent to `ceil(p / k)`. In integer arithmetic, `ceil(a / b)` can be calculated as `(a + b - 1) / b` for positive integers `a` and `b`.
*   **Time Complexity Analysis**: Understanding how to calculate the overall time taken for an algorithm, considering the number of operations.
*   **Space Complexity Analysis**: Understanding the memory usage of an algorithm, excluding the input storage.","Koko loves to eat bananas. There are `n` piles of bananas, and the `i`-th pile has `piles[i]` bananas. Koko has to eat all the bananas within `h` hours.

Koko decides her eating speed `k` (bananas per hour). Each hour, she chooses one pile and eats `k` bananas from it. If a pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during that hour. She cannot start eating from a different pile in the same hour.

Koko wants to eat all the bananas, but she also wants to be slow enough to avoid suspicion. Your task is to find the minimum integer eating speed `k` such that she can eat all the bananas within `h` hours.","* `1 <= piles.length <= 10^4`
* `1 <= piles[i] <= 10^9`
* `piles.length <= h <= 10^9`","piles = [3,6,7,11]
h = 8",4,"Input: 4
3 6 7 11
8
Output: 4,Input: 5
30 11 23 4 20
5
Output: 30,Input: 5
30 11 23 4 20
6
Output: 23,Input: 1
1000000000
1
Output: 1000000000,Input: 4
1 1 1 999999999
10
Output: 142857143",,,,,
Yellow-15,Frequency Count / Anagrams,"- Frequency Counting
- Character Arrays / Hash Maps
- String Manipulation","An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, ""listen"" is an anagram of ""silent"".

Your task is to implement a function that determines if two given strings are anagrams of each other. The strings will consist only of lowercase English letters.","- Both input strings, `s1` and `s2`, will contain only lowercase English letters ('a'-'z').
- The length of `s1` and `s2` will be between 0 and 10^5 characters, inclusive.","s1 = ""rat""
s2 = ""art""",TRUE,"Input: listen
silent
Output: true
Input: hello
world
Output: false
Input: a
a
Output: true
Input: abc
bca
Output: true
Input: abc
ab
Output: false
Input: """"
""""
Output: true","#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#define ALPHABET_SIZE 26

// Function to check if two strings are anagrams
bool areAnagrams(const char* s1, const char* s2) {
    int len1 = strlen(s1);
    int len2 = strlen(s2);

    // If lengths are different, they cannot be anagrams
    if (len1 != len2) {
        return false;
    }

    // Frequency array for lowercase English letters
    int counts[ALPHABET_SIZE] = {0}; // Initialize all to 0

    // Increment counts for characters in s1
    for (int i = 0; i < len1; i++) {
        counts[s1[i] - 'a']++;
    }

    // Decrement counts for characters in s2
    for (int i = 0; i < len2; i++) {
        counts[s2[i] - 'a']--;
    }

    // Check if all counts are zero
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (counts[i] != 0) {
            return false;
        }
    }

    return true;
}

int main() {
    char s1_buffer[100001]; // Max length + 1 for null terminator
    char s2_buffer[100001];

    // Read input strings
    if (scanf(""%s"", s1_buffer) != 1) return 1;
    if (scanf(""%s"", s2_buffer) != 1) return 1;

    // Call the core logic function
    if (areAnagrams(s1_buffer, s2_buffer)) {
        printf(""true\n"");
    } else {
        printf(""false\n"");
    }

    return 0;
}","def are_anagrams(s1: str, s2: str) -> bool:
    # If lengths are different, they cannot be anagrams
    if len(s1) != len(s2):
        return False

    # Frequency array (list) for lowercase English letters
    counts = [0] * 26

    # Increment counts for characters in s1
    for char_code in map(ord, s1):
        counts[char_code - ord('a')] += 1

    # Decrement counts for characters in s2
    for char_code in map(ord, s2):
        counts[char_code - ord('a')] -= 1

    # Check if all counts are zero
    for count in counts:
        if count != 0:
            return False

    return True

def main():
    s1 = input()
    s2 = input()

    # Call the core logic function
    if are_anagrams(s1, s2):
        print(""true"")
    else:
        print(""false"")

if __name__ == ""__main__"":
    main()","import java.util.Scanner;

public class Solution {

    // Function to check if two strings are anagrams
    public static boolean areAnagrams(String s1, String s2) {
        // If lengths are different, they cannot be anagrams
        if (s1.length() != s2.length()) {
            return false;
        }

        // Frequency array for lowercase English letters
        int[] counts = new int[26]; // Initialize all to 0 by default

        // Increment counts for characters in s1
        for (char c : s1.toCharArray()) {
            counts[c - 'a']++;
        }

        // Decrement counts for characters in s2
        for (char c : s2.toCharArray()) {
            counts[c - 'a']--;
        }

        // Check if all counts are zero
        for (int count : counts) {
            if (count != 0) {
                return false;
            }
        }

        return true;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read input strings
        String s1 = scanner.next();
        String s2 = scanner.next();

        // Call the core logic function
        if (areAnagrams(s1, s2)) {
            System.out.println(""true"");
        } else {
            System.out.println(""false"");
        }

        scanner.close();
    }
}","// Function to check if two strings are anagrams
function areAnagrams(s1, s2) {
    // If lengths are different, they cannot be anagrams
    if (s1.length !== s2.length) {
        return false;
    }

    // Frequency array for lowercase English letters
    const counts = new Array(26).fill(0);

    // Increment counts for characters in s1
    for (let i = 0; i < s1.length; i++) {
        counts[s1.charCodeAt(i) - 'a'.charCodeAt(0)]++;
    }

    // Decrement counts for characters in s2
    for (let i = 0; i < s2.length; i++) {
        counts[s2.charCodeAt(i) - 'a'.charCodeAt(0)]--;
    }

    // Check if all counts are zero
    for (let i = 0; i < counts.length; i++) {
        if (counts[i] !== 0) {
            return false;
        }
    }

    return true;
}

// Main function to handle I/O
function main() {
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    let lines = [];
    rl.on('line', (line) => {
        lines.push(line);
    }).on('close', () => {
        const s1 = lines[0];
        const s2 = lines[1];

        // Call the core logic function
        if (areAnagrams(s1, s2)) {
            console.log(""true"");
        } else {
            console.log(""false"");
        }
    });
}

// Invoke the main function
main();","#include <iostream>
#include <string>
#include <vector>

// Function to check if two strings are anagrams
bool areAnagrams(const std::string& s1, const std::string& s2) {
    // If lengths are different, they cannot be anagrams
    if (s1.length() != s2.length()) {
        return false;
    }

    // Frequency array for lowercase English letters
    std::vector<int> counts(26, 0); // Initialize all to 0

    // Increment counts for characters in s1
    for (char c : s1) {
        counts[c - 'a']++;
    }

    // Decrement counts for characters in s2
    for (char c : s2) {
        counts[c - 'a']--;
    }

    // Check if all counts are zero
    for (int count : counts) {
        if (count != 0) {
            return false;
        }
    }

    return true;
}

int main() {
    std::ios_base::sync_with_stdio(false); // Optimize C++ I/O
    std::cin.tie(NULL);

    std::string s1, s2;

    // Read input strings
    std::cin >> s1 >> s2;

    // Call the core logic function
    if (areAnagrams(s1, s2)) {
        std::cout << ""true\n"";
    } else {
        std::cout << ""false\n"";
    }

    return 0;
}"
Yellow-16,LeetCode,"*   **Arrays**: Understanding how to store and access collections of data.
*   **Sorted Arrays**: Leveraging the property that elements are in order to optimize solutions.
*   **Iteration**: Traversing through an array to examine each element.
*   **Counting**: Keeping track of how many elements satisfy a certain condition.
*   **Binary Search (Advanced)**: For larger inputs, a more efficient search algorithm can be used to quickly find an element or a position in a sorted array based on a condition. This problem can be optimally solved using binary search by cleverly identifying a monotonic property related to missing numbers.","You are given a **strictly increasing** array `arr` of positive integers and an integer `k`.

Your task is to find the `k`-th positive integer that is **missing** from the array. Positive integers start from `1`.

For example, if `arr = [2,3,4,7,11]` and `k = 5`:
The positive integers are `1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, ...`
Numbers present in `arr`: `2, 3, 4, 7, 11`
Missing positive integers in order: `1, 5, 6, 8, 9, 10, 12, ...`
The 1st missing is `1`.
The 2nd missing is `5`.
The 3rd missing is `6`.
The 4th missing is `8`.
The 5th missing is `9`.
So, the output for this example would be `9`.","*   `1 <= arr.length <= 1000`
*   `1 <= arr[i] <= 1000 + k`
*   `1 <= k <= 1000`
*   `arr` is sorted in strictly increasing order.
*   All elements in `arr` are distinct.","arr = [2,3,4,7,11], k = 5",9,"Input: 5
2 3 4 7 11
5
Output: 9,Input: 2
10 20
5
Output: 5,Input: 4
1 2 3 4
2
Output: 6,Input: 1
1
1
Output: 2,Input: 1
2
1
Output: 1","#include <stdio.h>
#include <stdlib.h>

int findKthPositive(int* arr, int arrSize, int k) {
    int low = 0;
    int high = arrSize - 1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        // Count of missing numbers before arr[mid]
        // If all numbers from 1 to arr[mid] were present, there would be arr[mid] numbers.
        // But we only have (mid + 1) numbers (arr[0] to arr[mid]).
        // So, arr[mid] - (mid + 1) gives the count of missing numbers.
        if (arr[mid] - (mid + 1) < k) {
            low = mid + 1; // Not enough missing numbers, look in the right half
        } else {
            high = mid - 1; // Enough missing numbers, try to find an earlier position
        }
    }
    
    // After the loop, 'low' will be the index where the k-th missing number would be.
    // The k-th missing number is simply 'low + k'.
    return low + k;
}

int main() {
    int arr_size, k;

    // Read arr_size
    scanf(""%d"", &arr_size);

    // Allocate memory for the array
    int* arr = (int*)malloc(arr_size * sizeof(int));

    // Read array elements
    for (int i = 0; i < arr_size; i++) {
        scanf(""%d"", &arr[i]);
    }

    // Read k
    scanf(""%d"", &k);

    // Call the function and print the result
    int result = findKthPositive(arr, arr_size, k);
    printf(""%d\n"", result);

    // Free allocated memory
    free(arr);

    return 0;
}","class Solution:
    def findKthPositive(self, arr: list[int], k: int) -> int:
        low = 0
        high = len(arr) - 1
        
        while low <= high:
            mid = low + (high - low) // 2
            # Count of missing numbers before arr[mid]
            # If all numbers from 1 to arr[mid] were present, there would be arr[mid] numbers.
            # But we only have (mid + 1) numbers (arr[0] to arr[mid]).
            # So, arr[mid] - (mid + 1) gives the count of missing numbers.
            if arr[mid] - (mid + 1) < k:
                low = mid + 1  # Not enough missing numbers, look in the right half
            else:
                high = mid - 1 # Enough missing numbers, try to find an earlier position
            
        # After the loop, 'low' will be the index where the k-th missing number would be.
        # The k-th missing number is simply 'low + k'.
        return low + k

def main():
    # Read array size
    n = int(input())
    # Read array elements
    arr = list(map(int, input().split()))
    # Read k
    k = int(input())

    sol = Solution()
    result = sol.findKthPositive(arr, k)
    print(result)

if __name__ == ""__main__"":
    main()","import java.util.Scanner;

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int low = 0;
        int high = arr.length - 1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            // Count of missing numbers before arr[mid]
            // If all numbers from 1 to arr[mid] were present, there would be arr[mid] numbers.
            // But we only have (mid + 1) numbers (arr[0] to arr[mid]).
            // So, arr[mid] - (mid + 1) gives the count of missing numbers.
            if (arr[mid] - (mid + 1) < k) {
                low = mid + 1; // Not enough missing numbers, look in the right half
            } else {
                high = mid - 1; // Enough missing numbers, try to find an earlier position
            }
        }
        
        // After the loop, 'low' will be the index where the k-th missing number would be.
        // The k-th missing number is simply 'low + k'.
        return low + k;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read array size
        int n = scanner.nextInt();
        int[] arr = new int[n];

        // Read array elements
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        // Read k
        int k = scanner.nextInt();

        Solution sol = new Solution();
        int result = sol.findKthPositive(arr, k);
        System.out.println(result);

        scanner.close();
    }
}","/**
 * @param {number[]} arr
 * @param {number} k
 * @return {number}
 */
var findKthPositive = function(arr, k) {
    let low = 0;
    let high = arr.length - 1;
    
    while (low <= high) {
        let mid = Math.floor(low + (high - low) / 2);
        // Count of missing numbers before arr[mid]
        // If all numbers from 1 to arr[mid] were present, there would be arr[mid] numbers.
        // But we only have (mid + 1) numbers (arr[0] to arr[mid]).
        // So, arr[mid] - (mid + 1) gives the count of missing numbers.
        if (arr[mid] - (mid + 1) < k) {
            low = mid + 1; // Not enough missing numbers, look in the right half
        } else {
            high = mid - 1; // Enough missing numbers, try to find an earlier position
        }
    }
    
    // After the loop, 'low' will be the index where the k-th missing number would be.
    // The k-th missing number is simply 'low + k'.
    return low + k;
};

// Main function for handling input/output
function main() {
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    let inputLines = [];
    rl.on('line', (line) => {
        inputLines.push(line);
    }).on('close', () => {
        let n = parseInt(inputLines[0]);
        let arr = inputLines[1].split(' ').map(Number);
        let k = parseInt(inputLines[2]);

        let result = findKthPositive(arr, k);
        console.log(result);
    });
}

// Call main to start the program
if (require.main === module) {
    main();
}","#include <iostream>
#include <vector>
#include <numeric>

class Solution {
public:
    int findKthPositive(std::vector<int>& arr, int k) {
        int low = 0;
        int high = arr.size() - 1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            // Count of missing numbers before arr[mid]
            // If all numbers from 1 to arr[mid] were present, there would be arr[mid] numbers.
            // But we only have (mid + 1) numbers (arr[0] to arr[mid]).
            // So, arr[mid] - (mid + 1) gives the count of missing numbers.
            if (arr[mid] - (mid + 1) < k) {
                low = mid + 1; // Not enough missing numbers, look in the right half
            } else {
                high = mid - 1; // Enough missing numbers, try to find an earlier position
            }
        }
        
        // After the loop, 'low' will be the index where the k-th missing number would be.
        // The k-th missing number is simply 'low + k'.
        return low + k;
    }
};

int main() {
    int n, k;
    std::cin >> n; // Read array size

    std::vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i]; // Read array elements
    }

    std::cin >> k; // Read k

    Solution sol;
    int result = sol.findKthPositive(arr, k);
    std::cout << result << std::endl;

    return 0;
}"
White-95,Basic String Manipulation,"*   String iteration
*   Conditional logic (if/else statements)
*   Character case checking (e.g., `is_lower`, `is_upper`)
*   Character case conversion (e.g., `to_lower`, `to_upper`)","Your task is to implement a function that takes a string as input and returns a new string where the case of each alphabetic character is swapped. This means all lowercase letters should become uppercase, and all uppercase letters should become lowercase. Non-alphabetic characters (numbers, symbols, spaces) should remain unchanged.","*   The input string will have a length between 0 and 100 characters, inclusive.
*   The string will consist of ASCII characters.","** `Hello World!`
**",** `hELLO wORLD!`,"Input: DSA CHALLENGE
Output: dsa challenge
Input: programmingisfun
Output: PROGRAMMINGISFUN
Input: 123Abc_DEF456
Output: 123aBC_def456
Input: 
Output: 
Input: !@#$%^&*()
Output: !@#$%^&*()","#include <stdio.h>
#include <string.h>
#include <ctype.h> // For islower, isupper, tolower, toupper
#include <stdlib.h> // For malloc, free

// Function to swap the case of characters in a string
char* swapCase(const char* s) {
    if (s == NULL) {
        return NULL;
    }

    size_t len = strlen(s);
    char* result = (char*)malloc(sizeof(char) * (len + 1)); // +1 for null terminator
    if (result == NULL) {
        return NULL; // Memory allocation failed
    }

    for (size_t i = 0; i < len; i++) {
        if (islower((unsigned char)s[i])) {
            result[i] = (char)toupper((unsigned char)s[i]);
        } else if (isupper((unsigned char)s[i])) {
            result[i] = (char)tolower((unsigned char)s[i]);
        } else {
            result[i] = s[i];
        }
    }
    result[len] = '\0'; // Null-terminate the result string
    return result;
}

int main() {
    char input[101]; // Max 100 chars + null terminator
    if (fgets(input, sizeof(input), stdin) == NULL) {
        return 1; // Error reading input
    }

    // Remove trailing newline character if present
    input[strcspn(input, ""\n"")] = 0;

    char* output = swapCase(input);
    if (output != NULL) {
        printf(""%s\n"", output);
        free(output); // Free allocated memory
    } else {
        // Handle error (e.g., malloc failed)
        return 1;
    }

    return 0;
}","def swapCase(s: str) -> str:
    """"""
    Swaps the case of each alphabetic character in a string.
    Lowercase letters become uppercase, and uppercase letters become lowercase.
    Non-alphabetic characters remain unchanged.
    """"""
    result_chars = []
    for char in s:
        if char.islower():
            result_chars.append(char.upper())
        elif char.isupper():
            result_chars.append(char.lower())
        else:
            result_chars.append(char)
    return """".join(result_chars)

if __name__ == ""__main__"":
    input_string = input()
    output_string = swapCase(input_string)
    print(output_string)","import java.util.Scanner;

public class Solution {

    // Function to swap the case of characters in a string
    public static String swapCase(String s) {
        if (s == null || s.isEmpty()) {
            return s;
        }

        StringBuilder result = new StringBuilder(s.length());
        for (char c : s.toCharArray()) {
            if (Character.isLowerCase(c)) {
                result.append(Character.toUpperCase(c));
            } else if (Character.isUpperCase(c)) {
                result.append(Character.toLowerCase(c));
            } else {
                result.append(c);
            }
        }
        return result.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String output = swapCase(input);
        System.out.println(output);
        scanner.close();
    }
}","function swapCase(s) {
    if (!s) {
        return s;
    }

    let result = '';
    for (let i = 0; i < s.length; i++) {
        const char = s[i];
        // Check if the character is an alphabetic character
        if (char >= 'a' && char <= 'z') {
            result += char.toUpperCase();
        } else if (char >= 'A' && char <= 'Z') {
            result += char.toLowerCase();
        } else {
            result += char;
        }
    }
    return result;
}

// Read input from stdin
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.on('line', (line) => {
    const output = swapCase(line);
    console.log(output);
    rl.close();
});","#include <iostream>
#include <string>
#include <cctype> // For islower, isupper, tolower, toupper

// Function to swap the case of characters in a string
std::string swapCase(const std::string& s) {
    std::string result = """";
    for (char c : s) {
        if (std::islower(c)) {
            result += static_cast<char>(std::toupper(c));
        } else if (std::isupper(c)) {
            result += static_cast<char>(std::tolower(c));
        } else {
            result += c;
        }
    }
    return result;
}

int main() {
    std::string input;
    std::getline(std::cin, input);
    std::string output = swapCase(input);
    std::cout << output << std::endl;
    return 0;
}"
White-96,Basic String Manipulation,"*   String iteration
*   Character comparison
*   Basic loops (for, while)
*   Variables for counting",You will be given a string `s` and a single character `c`. Your task is to count how many times the character `c` appears in the string `s`. The count should be case-sensitive.,"*   The input string `s` will consist of printable ASCII characters (excluding spaces).
*   The length of `s` will be between 1 and 1000 characters.
*   The target character `c` will be a single printable ASCII character.
*   The count is case-sensitive (e.g., 'a' is different from 'A').","s = ""programming""
c = 'g'","2

#### Example 2:","Input: programming
g
Output: 2

Input: Apple
a
Output: 0

Input: Mississippi
i
Output: 4

Input: hello
z
Output: 0

Input: AAAAA
A
Output: 5","#include <stdio.h>
#include <string.h>

// Function to count occurrences of a character in a string
int countChar(const char* s, char c) {
    int count = 0;
    int len = strlen(s);
    for (int i = 0; i < len; i++) {
        if (s[i] == c) {
            count++;
        }
    }
    return count;
}

int main() {
    char s[1001]; // Max length 1000 + null terminator
    char c;

    // Read the string (assumes no spaces based on constraints)
    scanf(""%s"", s);

    // Read the character, with a space before %c to consume any leftover whitespace (like newline)
    scanf("" %c"", &c);

    int result = countChar(s, c);

    printf(""%d\n"", result);

    return 0;
}","def count_char(s: str, c: str) -> int:
    """"""
    Counts the occurrences of a character in a string.
    """"""
    count = 0
    for char in s:
        if char == c:
            count += 1
    return count

if __name__ == ""__main__"":
    # Read the string (assumes no spaces based on constraints)
    s = input()

    # Read the character (input() reads a line, so c will be a string of length 1)
    c = input()

    result = count_char(s, c)

    print(result)","import java.util.Scanner;

public class Solution {

    // Function to count occurrences of a character in a string
    public int countChar(String s, char c) {
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the string (assumes no spaces based on constraints)
        String s = scanner.next();

        // Read the character
        // scanner.next() reads the next token as a string, .charAt(0) takes its first character
        char c = scanner.next().charAt(0);

        Solution sol = new Solution();
        int result = sol.countChar(s, c);

        System.out.println(result);

        scanner.close();
    }
}","function countChar(s, c) {
    let count = 0;
    for (let i = 0; i < s.length; i++) {
        if (s[i] === c) {
            count++;
        }
    }
    return count;
}

// --- Standard competitive programming structure for JS on Node.js --- 
// Read all input lines
const inputLines = [];
require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
}).on('line', line => {
    inputLines.push(line);
}).on('close', () => {
    // Once all input is read, call main logic
    main(inputLines);
});

function main(inputLines) {
    const s = inputLines[0]; // First line is the string
    const c = inputLines[1]; // Second line is the character (as a string of length 1)
    
    const result = countChar(s, c);
    console.log(result);
}","#include <iostream>
#include <string>
#include <vector>

// Function to count occurrences of a character in a string
int countChar(const std::string& s, char c) {
    int count = 0;
    for (char current_char : s) { // Use a range-based for loop for elegant iteration
        if (current_char == c) {
            count++;
        }
    }
    return count;
}

int main() {
    std::string s;
    char c;

    // Read the string (assumes no spaces based on constraints)
    std::cin >> s;

    // Read the character
    std::cin >> c;

    int result = countChar(s, c);

    std::cout << result << std::endl;

    return 0;
}",4
